package protocol

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_Encrypt_Password(t *testing.T) {
	type PasswordTest struct {
		pem      []byte
		expected []byte
		password string
		salt1    []byte
		salt2    []byte
	}
	passwordTable := []PasswordTest{
		{
			pem:      []byte{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x36, 0x38, 0x5a, 0x6b, 0x4f, 0x6c, 0x75, 0x6d, 0x58, 0x48, 0x68, 0x4c, 0x59, 0x67, 0x51, 0x6b, 0x76, 0x35, 0x62, 0x54, 0xa, 0x39, 0x39, 0x51, 0x41, 0x41, 0x49, 0x52, 0x62, 0x79, 0x70, 0x39, 0x32, 0x7a, 0x48, 0x54, 0x78, 0x6e, 0x44, 0x36, 0x59, 0x78, 0x4e, 0x71, 0x59, 0x4f, 0x74, 0x2f, 0x61, 0x6d, 0x6b, 0x35, 0x5a, 0x6a, 0x51, 0x2b, 0x56, 0x6d, 0x4f, 0x46, 0x54, 0x63, 0x67, 0x43, 0x6e, 0x61, 0x48, 0x44, 0x53, 0x54, 0x69, 0x51, 0x4e, 0x47, 0x4b, 0x64, 0x33, 0x75, 0x79, 0x52, 0x37, 0x33, 0x36, 0x76, 0x68, 0xa, 0x72, 0x71, 0x70, 0x68, 0x4d, 0x36, 0x59, 0x77, 0x73, 0x31, 0x68, 0x55, 0x37, 0x77, 0x45, 0x52, 0x58, 0x2b, 0x63, 0x59, 0x64, 0x78, 0x69, 0x43, 0x45, 0x75, 0x4d, 0x38, 0x71, 0x70, 0x4c, 0x44, 0x65, 0x69, 0x52, 0x69, 0x49, 0x56, 0x57, 0x50, 0x6f, 0x6c, 0x47, 0x4b, 0x43, 0x66, 0x6d, 0x66, 0x35, 0x33, 0x74, 0x37, 0x43, 0x51, 0x47, 0x63, 0x58, 0x6d, 0x55, 0x4e, 0x71, 0x58, 0x64, 0x46, 0xa, 0x71, 0x58, 0x49, 0x42, 0x43, 0x45, 0x65, 0x4c, 0x4a, 0x4a, 0x47, 0x45, 0x2f, 0x65, 0x51, 0x63, 0x68, 0x45, 0x65, 0x41, 0x53, 0x76, 0x6c, 0x4f, 0x67, 0x6a, 0x39, 0x73, 0x48, 0x56, 0x34, 0x68, 0x4e, 0x6a, 0x56, 0x59, 0x43, 0x41, 0x33, 0x2b, 0x43, 0x7a, 0x52, 0x77, 0x6f, 0x31, 0x64, 0x43, 0x2f, 0x77, 0x55, 0x4e, 0x4c, 0x59, 0x34, 0x42, 0x49, 0x43, 0x4e, 0x7a, 0x73, 0x68, 0x62, 0x2f, 0xa, 0x77, 0x64, 0x31, 0x6d, 0x6f, 0x46, 0x6b, 0x78, 0x34, 0x76, 0x61, 0x73, 0x68, 0x59, 0x71, 0x30, 0x4e, 0x50, 0x47, 0x34, 0x52, 0x51, 0x51, 0x56, 0x4b, 0x31, 0x57, 0x44, 0x67, 0x44, 0x61, 0x33, 0x45, 0x68, 0x6e, 0x63, 0x47, 0x66, 0x74, 0x41, 0x61, 0x62, 0x61, 0x6c, 0x37, 0x62, 0x52, 0x55, 0x30, 0x2b, 0x53, 0x4e, 0x51, 0x73, 0x4c, 0x67, 0x75, 0x34, 0x66, 0x57, 0x51, 0x70, 0x6f, 0x66, 0xa, 0x6c, 0x79, 0x51, 0x77, 0x64, 0x67, 0x4f, 0x35, 0x52, 0x75, 0x52, 0x2f, 0x51, 0x52, 0x52, 0x4f, 0x69, 0x38, 0x51, 0x7a, 0x4a, 0x55, 0x57, 0x73, 0x36, 0x52, 0x6e, 0x68, 0x45, 0x38, 0x34, 0x4c, 0x2b, 0x63, 0x4f, 0x54, 0x47, 0x4c, 0x67, 0x74, 0x70, 0x63, 0x74, 0x35, 0x2b, 0x72, 0x37, 0x6a, 0x59, 0x32, 0x56, 0x49, 0x66, 0x75, 0x58, 0x76, 0x69, 0x30, 0x43, 0x4b, 0x72, 0x4b, 0x54, 0x5a, 0xa, 0x48, 0x77, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d},
			expected: []byte{0x86, 0xc4, 0xa4, 0xfa, 0x48, 0x86, 0x51, 0xfb, 0xe7, 0x75, 0x6a, 0xc3, 0x6, 0xb7, 0x50, 0x3, 0xc5, 0x9b, 0x3d, 0xc8, 0x80, 0x8c, 0x8b, 0x32, 0x69, 0x91, 0x8e, 0xe4, 0xb7, 0x83, 0xa9, 0x5b, 0xa6, 0x76, 0xe9, 0x3b, 0x3e, 0x7a, 0x33, 0x4d, 0x7c, 0xa8, 0xf9, 0xdd, 0x45, 0x4c, 0x2b, 0x8e, 0x85, 0x7c, 0x56, 0x57, 0xf7, 0xbe, 0xe0, 0xa8, 0xe7, 0x3e, 0x45, 0xb4, 0x6b, 0xde, 0xce, 0x15, 0xb0, 0x42, 0x40, 0x2a, 0x76, 0x49, 0x32, 0xaa, 0x94, 0xf, 0x24, 0x37, 0x82, 0x7, 0x7f, 0xde, 0x32, 0x24, 0xcd, 0x27, 0xd9, 0x82, 0xf3, 0xd0, 0xf2, 0x89, 0x71, 0x59, 0x33, 0x4e, 0x67, 0x6d, 0xbf, 0x4d, 0x39, 0xfa, 0xb2, 0xea, 0x29, 0xc, 0xc1, 0x49, 0x68, 0xb2, 0xdf, 0x6c, 0x55, 0xb1, 0x95, 0xe2, 0x89, 0x20, 0x60, 0x59, 0x16, 0x26, 0xe6, 0xde, 0x76, 0x51, 0x48, 0xc5, 0x3c, 0x43, 0xa1, 0xf7, 0x25, 0x5e, 0x1e, 0xad, 0xfd, 0x1, 0x10, 0x70, 0x5, 0xc4, 0xdd, 0x0, 0xf3, 0xa, 0x69, 0x8f, 0x70, 0xb9, 0xae, 0xa5, 0x18, 0x0, 0x89, 0xd7, 0x18, 0x46, 0xd2, 0x6, 0x28, 0xba, 0x77, 0xdc, 0x15, 0x9b, 0x6a, 0xa, 0x26, 0x3e, 0xec, 0x68, 0xd6, 0x64, 0xa6, 0x72, 0x9, 0xe8, 0x48, 0x56, 0x54, 0xde, 0x4, 0xf0, 0x8d, 0x58, 0x70, 0x25, 0xbc, 0xab, 0x25, 0x88, 0x80, 0x96, 0xb1, 0x6f, 0x24, 0xa5, 0x2, 0xa2, 0x6d, 0x87, 0x88, 0xe1, 0x77, 0x81, 0xd, 0x33, 0x6b, 0x36, 0x80, 0xf0, 0xfa, 0x5d, 0x64, 0xc3, 0x68, 0x13, 0xb4, 0x67, 0x3a, 0x5f, 0xca, 0xf1, 0xd3, 0x7e, 0x45, 0x37, 0x6c, 0x16, 0x92, 0x88, 0xa3, 0x76, 0x30, 0xbf, 0x9e, 0x6, 0x5, 0x31, 0x81, 0x25, 0x12, 0x30, 0xd6, 0x76, 0x41, 0x16, 0x1, 0xea, 0xd0, 0xfd, 0x57, 0x66, 0xbb, 0x69, 0x28, 0xb4},
			password: "mypassword",
			salt1:    []byte{0x63, 0x31, 0x53, 0x6a, 0x50, 0x74, 0x26, 0x5e},                       // , 0x0},
			salt2:    []byte{0x1f, 0x12, 0x21, 0x5f, 0x9, 0x27, 0xb, 0x2e, 0x43, 0x7f, 0x19, 0x15}, // , 0x0},
		},
	}
	for _, entry := range passwordTable {
		salt := append(entry.salt1, entry.salt2...)
		// if len(salt) > 20 {
		// 	salt = salt[:20]
		// }
		e := encryptPassword(entry.pem, []byte(entry.password), salt)
		assert.Equal(
			t,
			entry.expected,
			e,
		)
	}
}
func Test_Hash_Password(t *testing.T) {
	type PasswordTest struct {
		Method  string
		Encoded []byte
		Decoded string
		Salt    []byte
	}
	passwordTable := []PasswordTest{
		{
			Method:  "mysql_native_password",
			Encoded: []byte{0xf2, 0xe3, 0xdc, 0x61, 0x10, 0x5, 0xcd, 0x84, 0x2d, 0xbd, 0x14, 0x3e, 0x68, 0x4a, 0xaf, 0x54, 0x9f, 0xe2, 0x8d, 0x37},
			Decoded: "Softrams10#",
			Salt:    []byte{0x5b, 0x2d, 0x59, 0x41, 0x41, 0x25, 0x20, 0x27 /* */, 0x20, 0x75, 0x4b, 0x25, 0x4a, 0x57, 0x1f, 0x7a, 0x9, 0x5d, 0x1, 0x6b},
		},
		{
			Method:  "caching_sha2_password",
			Encoded: []byte{0x92, 0xba, 0x18, 0x2f, 0xa8, 0x85, 0x21, 0xcb, 0xe4, 0x1e, 0xdd, 0xf4, 0x9c, 0xec, 0x0, 0xfa, 0xda, 0x42, 0x98, 0x1b, 0xfc, 0x9b, 0xf3, 0x2d, 0xfb, 0x23, 0x2, 0x8e, 0xc5, 0x35, 0x99, 0x42},
			Decoded: "mypassword",
			Salt:    []byte{0x16, 0x23, 0x2a, 0x16, 0x68, 0x64, 0x2, 0x10 /* 0x0, */, 0x1, 0x41, 0x53, 0x41, 0x26, 0x1, 0x4c, 0x67, 0x40, 0x2, 0x5c, 0x5c}, // , 0x0},
		},
	}
	for _, entry := range passwordTable {
		e, _ := hashPassword(entry.Method, entry.Salt, string(entry.Decoded))
		assert.Equal(
			t,
			entry.Encoded,
			e,
		)
	}
}
